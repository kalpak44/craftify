openapi: 3.1.0
info:
  title: Items Service API
  version: 1.0.0
  description: REST API for Items, Categories, CSV import/export. Spring-friendly (Pageable, ETags, RFC-7807).
servers:
  - url: /api/v1
tags:
  - name: Items
  - name: Categories
  - name: Lookups

paths:
  /items:
    get:
      tags: [Items]
      summary: List items (pageable, filterable, sortable)
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/size'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/q'
        - $ref: '#/components/parameters/status'
        - $ref: '#/components/parameters/categoryId'
        - $ref: '#/components/parameters/uom'
        - $ref: '#/components/parameters/includeDeleted'
      responses:
        '200':
          description: Paged result
          headers:
            ETag:
              description: Weak ETag of the list representation (optional)
              schema: { type: string }
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemPage'
    post:
      tags: [Items]
      summary: Create item
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/CreateItemRequest' }
      responses:
        '201':
          description: Created
          headers:
            Location:
              description: URL of the created resource
              schema: { type: string }
            ETag:
              description: Entity tag derived from version
              schema: { type: string, example: W/"3" }
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ItemDetail' }
        '400': { $ref: '#/components/responses/Problem' }
        '409': { $ref: '#/components/responses/Problem' }

  /items/{id}:
    get:
      tags: [Items]
      summary: Get one item by id
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: OK
          headers:
            ETag:
              description: Entity tag derived from version
              schema: { type: string, example: W/"3" }
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ItemDetail' }
        '404': { $ref: '#/components/responses/Problem' }
    put:
      tags: [Items]
      summary: Update (full) item by id
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/ifMatch'
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/UpdateItemRequest' }
      responses:
        '200':
          description: Updated
          headers:
            ETag:
              description: New entity tag
              schema: { type: string, example: W/"4" }
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ItemDetail' }
        '400': { $ref: '#/components/responses/Problem' }
        '404': { $ref: '#/components/responses/Problem' }
        '412': { $ref: '#/components/responses/Problem' }
    delete:
      tags: [Items]
      summary: Soft delete item by id
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/ifMatch'
      responses:
        '204':
          description: No Content
        '404': { $ref: '#/components/responses/Problem' }
        '412': { $ref: '#/components/responses/Problem' }

  /items:batch-delete:
    post:
      tags: [Items]
      summary: Bulk delete items by id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [ids]
              properties:
                ids:
                  type: array
                  items: { format: uuid, type: string }
      responses:
        '200':
          description: Result
          content:
            application/json:
              schema:
                type: object
                properties:
                  deleted:
                    type: integer
                    minimum: 0
        '400': { $ref: '#/components/responses/Problem' }

  /items:export:
    get:
      tags: [Items]
      summary: Export items as CSV (applies same filters as list)
      parameters:
        - $ref: '#/components/parameters/q'
        - $ref: '#/components/parameters/status'
        - $ref: '#/components/parameters/categoryId'
        - $ref: '#/components/parameters/uom'
        - name: ids
          in: query
          description: Optional selection (comma-separated UUIDs)
          schema: { type: string, example: '7c0f…​,0c88…' }
      responses:
        '200':
          description: CSV stream
          headers:
            Content-Disposition:
              schema: { type: string, example: attachment; filename="items_2025-09-23.csv" }
          content:
            text/csv:
              schema:
                type: string
                format: binary

  /items:import:
    post:
      tags: [Items]
      summary: Import items via CSV
      parameters:
        - name: mode
          in: query
          description: Import behavior
          schema:
            type: string
            enum: [upsert, create-only]
            default: upsert
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required: [file]
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: Import result
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ImportResult' }
        '400': { $ref: '#/components/responses/Problem' }
        '422': { $ref: '#/components/responses/Problem' }

  /categories:
    get:
      tags: [Categories]
      summary: List/search categories (pageable)
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/size'
        - $ref: '#/components/parameters/sortCategory'
        - name: q
          in: query
          required: false
          description: Case-insensitive substring on name
          schema: { type: string }
      responses:
        '200':
          description: Paged categories
          content:
            application/json:
              schema: { $ref: '#/components/schemas/CategoryPage' }
    post:
      tags: [Categories]
      summary: Create category
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/CreateCategoryRequest' }
      responses:
        '201':
          description: Created
          headers:
            Location:
              schema: { type: string }
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Category' }
        '400': { $ref: '#/components/responses/Problem' }
        '409': { $ref: '#/components/responses/Problem' }

  /categories/{id}:
    get:
      tags: [Categories]
      summary: Get category
      parameters:
        - $ref: '#/components/parameters/categoryPathId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Category' }
        '404': { $ref: '#/components/responses/Problem' }
    patch:
      tags: [Categories]
      summary: Rename category
      parameters:
        - $ref: '#/components/parameters/categoryPathId'
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/RenameCategoryRequest' }
      responses:
        '200':
          description: Renamed
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Category' }
        '400': { $ref: '#/components/responses/Problem' }
        '404': { $ref: '#/components/responses/Problem' }
        '409': { $ref: '#/components/responses/Problem' }
    delete:
      tags: [Categories]
      summary: Delete category
      parameters:
        - $ref: '#/components/parameters/categoryPathId'
        - name: force
          in: query
          required: false
          schema: { type: boolean, default: false }
          description: Force delete even if in use (implementation-defined)
      responses:
        '204':
          description: No Content
        '404': { $ref: '#/components/responses/Problem' }
        '409': { $ref: '#/components/responses/Problem' }

  /uoms:
    get:
      tags: [Lookups]
      summary: Common UoM codes (for autocomplete)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  example: pcs

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    id:
      name: id
      in: path
      required: true
      description: Item id (UUID)
      schema: { type: string, format: uuid }
    categoryPathId:
      name: id
      in: path
      required: true
      description: Category id (UUID)
      schema: { type: string, format: uuid }
    ifMatch:
      name: If-Match
      in: header
      required: true
      description: ETag for optimistic locking, e.g. W/"3"
      schema: { type: string }
    page:
      name: page
      in: query
      schema: { type: integer, minimum: 0, default: 0 }
    size:
      name: size
      in: query
      schema: { type: integer, minimum: 1, maximum: 200, default: 8 }
    sort:
      name: sort
      in: query
      description: Spring-style sort, e.g. sort=name,asc (repeatable)
      schema: { type: string }
      explode: true
    sortCategory:
      name: sort
      in: query
      description: Sort by name,asc|desc
      schema: { type: string, example: name,asc }
    q:
      name: q
      in: query
      required: false
      description: Search by code or name (substring, case-insensitive)
      schema: { type: string }
    status:
      name: status
      in: query
      required: false
      schema: { $ref: '#/components/schemas/Status' }
    categoryId:
      name: categoryId
      in: query
      required: false
      schema: { type: string, format: uuid }
    uom:
      name: uom
      in: query
      required: false
      description: Filter by base or additional UoM code
      schema: { type: string, minLength: 1, maxLength: 16 }
    includeDeleted:
      name: includeDeleted
      in: query
      required: false
      schema: { type: boolean, default: false }

  responses:
    Problem:
      description: Problem Details (RFC-7807)
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetail'

  schemas:
    # --- Items ---
    ItemList:
      type: object
      properties:
        id: { type: string, format: uuid }
        code:
          type: string
          description: Business code (e.g., ITM-001)
          example: ITM-001
        name: { type: string }
        status: { $ref: '#/components/schemas/Status' }
        categoryId: { type: string, format: uuid }
        categoryName: { type: string }
        uomBase: { type: string, example: pcs }
        updatedAt: { type: string, format: date-time }
    ItemPage:
      type: object
      properties:
        content:
          type: array
          items: { $ref: '#/components/schemas/ItemList' }
        page: { type: integer, minimum: 0, example: 0 }
        size: { type: integer, minimum: 1, example: 8 }
        totalElements: { type: integer, minimum: 0 }
        totalPages: { type: integer, minimum: 1 }
        sort:
          type: array
          items: { type: string, example: name,asc }
    ItemDetail:
      type: object
      required: [id, code, name, status, categoryId, uomBase, version]
      properties:
        id: { type: string, format: uuid }
        code:
          type: string
          example: ITM-001
        name: { type: string, minLength: 1, maxLength: 200 }
        status: { $ref: '#/components/schemas/Status' }
        categoryId: { type: string, format: uuid }
        uomBase: { type: string, minLength: 1, maxLength: 16, example: pcs }
        description: { type: string, maxLength: 4000 }
        uoms:
          type: array
          items: { $ref: '#/components/schemas/ItemUom' }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
        version: { type: integer, minimum: 0, example: 3 }
    CreateItemRequest:
      type: object
      required: [name, status, categoryId, uomBase]
      properties:
        code:
          type: string
          description: Optional on create; server may generate
          example: ITM-011
        name: { type: string, minLength: 1, maxLength: 200 }
        status: { $ref: '#/components/schemas/Status' }
        categoryId: { type: string, format: uuid }
        uomBase: { type: string, minLength: 1, maxLength: 16 }
        description: { type: string, maxLength: 4000 }
        uoms:
          type: array
          items: { $ref: '#/components/schemas/ItemUom' }
    UpdateItemRequest:
      type: object
      required: [code, name, status, categoryId, uomBase]
      properties:
        code: { type: string, example: ITM-011 }
        name: { type: string, minLength: 1, maxLength: 200 }
        status: { $ref: '#/components/schemas/Status' }
        categoryId: { type: string, format: uuid }
        uomBase: { type: string, minLength: 1, maxLength: 16 }
        description: { type: string, maxLength: 4000 }
        uoms:
          type: array
          items: { $ref: '#/components/schemas/ItemUom' }
    ItemUom:
      type: object
      required: [uom, coef]
      properties:
        uom: { type: string, minLength: 1, maxLength: 16, example: box }
        coef:
          type: number
          exclusiveMinimum: 0
          example: 10
        notes: { type: string, maxLength: 200 }
    Status:
      type: string
      enum: [Draft, Active, Hold, Discontinued]

    # --- Categories ---
    Category:
      type: object
      required: [id, name]
      properties:
        id: { type: string, format: uuid }
        name: { type: string, minLength: 1, maxLength: 100 }
    CategoryPage:
      type: object
      properties:
        content:
          type: array
          items: { $ref: '#/components/schemas/Category' }
        page: { type: integer, minimum: 0 }
        size: { type: integer, minimum: 1 }
        totalElements: { type: integer, minimum: 0 }
        totalPages: { type: integer, minimum: 1 }
        sort:
          type: array
          items: { type: string, example: name,asc }
    CreateCategoryRequest:
      type: object
      required: [name]
      properties:
        name: { type: string, minLength: 1, maxLength: 100 }
    RenameCategoryRequest:
      type: object
      required: [name]
      properties:
        name: { type: string, minLength: 1, maxLength: 100 }

    # --- Problem / Import result ---
    ProblemDetail:
      type: object
      description: RFC-7807 Problem Details
      properties:
        type: { type: string, format: uri }
        title: { type: string }
        status: { type: integer }
        detail: { type: string }
        instance: { type: string }
        errors:
          type: object
          additionalProperties:
            type: string
    ImportResult:
      type: object
      properties:
        created: { type: integer, minimum: 0 }
        updated: { type: integer, minimum: 0 }
        errors:
          type: array
          items:
            type: object
            properties:
              row: { type: integer, minimum: 1 }
              field: { type: string }
              message: { type: string }

security:
  - bearerAuth: []
