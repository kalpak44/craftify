/*
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.15.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.craftify.backend.api;

import com.craftify.backend.api.model.CreateItemRequest;
import com.craftify.backend.api.model.ItemDetail;
import com.craftify.backend.api.model.ItemPage;
import com.craftify.backend.api.model.ProblemDetail;
import com.craftify.backend.api.model.Status;
import com.craftify.backend.api.model.UpdateItemRequest;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import jakarta.validation.constraints.Max;
import jakarta.validation.constraints.Min;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.lang.Nullable;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.context.request.NativeWebRequest;

import java.util.Optional;
import java.util.UUID;

@Validated
@Tag(name = "Items", description = "the Items API")
public interface ItemsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    public static final String PATH_ITEMS_GET = "/items";

    /**
     * GET /items : List items (pageable, filterable, sortable)
     *
     * @param page           (optional, default to 0)
     * @param size           (optional, default to 8)
     * @param sort           Spring-style sort, e.g. sort&#x3D;name,asc (repeatable) (optional)
     * @param q              Search by code or name (substring, case-insensitive) (optional)
     * @param status         (optional)
     * @param categoryId     (optional)
     * @param uom            Filter by base or additional UoM code (optional)
     * @param includeDeleted (optional, default to false)
     * @return Paged result (status code 200)
     */
    @Operation(
            operationId = "itemsGet",
            summary = "List items (pageable, filterable, sortable)",
            tags = {"Items"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "Paged result", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = ItemPage.class))
                    })
            },
            security = {
                    @SecurityRequirement(name = "bearerAuth")
            }
    )
    @RequestMapping(
            method = RequestMethod.GET,
            value = ItemsApi.PATH_ITEMS_GET,
            produces = {"application/json"}
    )

    default ResponseEntity<ItemPage> itemsGet(
            @Min(0) @Parameter(name = "page", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page", required = false, defaultValue = "0") Integer page,
            @Min(1) @Max(200) @Parameter(name = "size", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "size", required = false, defaultValue = "8") Integer size,
            @Parameter(name = "sort", description = "Spring-style sort, e.g. sort=name,asc (repeatable)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "sort", required = false) @Nullable String sort,
            @Parameter(name = "q", description = "Search by code or name (substring, case-insensitive)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "q", required = false) @Nullable String q,
            @Parameter(name = "status", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "status", required = false) @Nullable Status status,
            @Parameter(name = "categoryId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "categoryId", required = false) @Nullable UUID categoryId,
            @Size(min = 1, max = 16) @Parameter(name = "uom", description = "Filter by base or additional UoM code", in = ParameterIn.QUERY) @Valid @RequestParam(value = "uom", required = false) @Nullable String uom,
            @Parameter(name = "includeDeleted", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "includeDeleted", required = false, defaultValue = "false") Boolean includeDeleted
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"size\" : 8, \"totalPages\" : 1, \"page\" : 0, \"sort\" : [ \"name\", \"name\" ], \"content\" : [ { \"code\" : \"ITM-001\", \"uomBase\" : \"pcs\", \"name\" : \"name\", \"id\" : \"ITM-001\", \"categoryName\" : \"categoryName\", \"categoryId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"status\" : \"Draft\", \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" }, { \"code\" : \"ITM-002\", \"uomBase\" : \"pcs\", \"name\" : \"name\", \"id\" : \"ITM-002\", \"categoryName\" : \"categoryName\", \"categoryId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"status\" : \"Draft\", \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" } ], \"totalElements\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    public static final String PATH_ITEMS_ID_DELETE = "/items/{id}";

    /**
     * DELETE /items/{id} : Soft delete item by id
     *
     * @param id      Item id (e.g., ITM-001) (required)
     * @param ifMatch ETag for optimistic locking, e.g. W/\"3\" (required)
     * @return No Content (status code 204)
     * or Problem Details (RFC-7807) (status code 404)
     * or Problem Details (RFC-7807) (status code 412)
     */
    @Operation(
            operationId = "itemsIdDelete",
            summary = "Soft delete item by id",
            tags = {"Items"},
            responses = {
                    @ApiResponse(responseCode = "204", description = "No Content"),
                    @ApiResponse(responseCode = "404", description = "Problem Details (RFC-7807)", content = {
                            @Content(mediaType = "application/problem+json", schema = @Schema(implementation = ProblemDetail.class))
                    }),
                    @ApiResponse(responseCode = "412", description = "Problem Details (RFC-7807)", content = {
                            @Content(mediaType = "application/problem+json", schema = @Schema(implementation = ProblemDetail.class))
                    })
            },
            security = {
                    @SecurityRequirement(name = "bearerAuth")
            }
    )
    @RequestMapping(
            method = RequestMethod.DELETE,
            value = ItemsApi.PATH_ITEMS_ID_DELETE,
            produces = {"application/problem+json"}
    )

    default ResponseEntity<Void> itemsIdDelete(
            @Parameter(name = "id", description = "Item id", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
            @NotNull @Parameter(name = "If-Match", description = "ETag for optimistic locking, e.g. W/\"3\"", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "If-Match", required = true) String ifMatch
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/problem+json"))) {
                    String exampleString = "Custom MIME type example not yet supported: application/problem+json";
                    ApiUtil.setExampleResponse(request, "application/problem+json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/problem+json"))) {
                    String exampleString = "Custom MIME type example not yet supported: application/problem+json";
                    ApiUtil.setExampleResponse(request, "application/problem+json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    public static final String PATH_ITEMS_ID_GET = "/items/{id}";

    /**
     * GET /items/{id} : Get one item by id
     *
     * @param id Item id (e.g., ITM-001) (required)
     * @return OK (status code 200)
     * or Problem Details (RFC-7807) (status code 404)
     */
    @Operation(
            operationId = "itemsIdGet",
            summary = "Get one item by id",
            tags = {"Items"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "OK", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = ItemDetail.class)),
                            @Content(mediaType = "application/problem+json", schema = @Schema(implementation = ItemDetail.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "Problem Details (RFC-7807)", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetail.class)),
                            @Content(mediaType = "application/problem+json", schema = @Schema(implementation = ProblemDetail.class))
                    })
            },
            security = {
                    @SecurityRequirement(name = "bearerAuth")
            }
    )
    @RequestMapping(
            method = RequestMethod.GET,
            value = ItemsApi.PATH_ITEMS_ID_GET,
            produces = {"application/json", "application/problem+json"}
    )

    default ResponseEntity<ItemDetail> itemsIdGet(
            @Parameter(name = "id", description = "Item id", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"code\" : \"ITM-001\", \"uomBase\" : \"pcs\", \"uoms\" : [ { \"uom\" : \"box\", \"coef\" : 10, \"notes\" : \"notes\" }, { \"uom\" : \"box\", \"coef\" : 10, \"notes\" : \"notes\" } ], \"name\" : \"name\", \"description\" : \"description\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"version\" : 3, \"categoryId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"status\" : \"Draft\", \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/problem+json"))) {
                    String exampleString = "Custom MIME type example not yet supported: application/problem+json";
                    ApiUtil.setExampleResponse(request, "application/problem+json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    public static final String PATH_ITEMS_ID_PUT = "/items/{id}";

    /**
     * PUT /items/{id} : Update (full) item by id
     *
     * @param id                Item id (e.g., ITM-001) (required)
     * @param ifMatch           ETag for optimistic locking, e.g. W/\"3\" (required)
     * @param updateItemRequest (required)
     * @return Updated (status code 200)
     * or Problem Details (RFC-7807) (status code 400)
     * or Problem Details (RFC-7807) (status code 404)
     * or Problem Details (RFC-7807) (status code 412)
     */
    @Operation(
            operationId = "itemsIdPut",
            summary = "Update (full) item by id",
            tags = {"Items"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "Updated", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = ItemDetail.class)),
                            @Content(mediaType = "application/problem+json", schema = @Schema(implementation = ItemDetail.class))
                    }),
                    @ApiResponse(responseCode = "400", description = "Problem Details (RFC-7807)", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetail.class)),
                            @Content(mediaType = "application/problem+json", schema = @Schema(implementation = ProblemDetail.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "Problem Details (RFC-7807)", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetail.class)),
                            @Content(mediaType = "application/problem+json", schema = @Schema(implementation = ProblemDetail.class))
                    }),
                    @ApiResponse(responseCode = "412", description = "Problem Details (RFC-7807)", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetail.class)),
                            @Content(mediaType = "application/problem+json", schema = @Schema(implementation = ProblemDetail.class))
                    })
            },
            security = {
                    @SecurityRequirement(name = "bearerAuth")
            }
    )
    @RequestMapping(
            method = RequestMethod.PUT,
            value = ItemsApi.PATH_ITEMS_ID_PUT,
            produces = {"application/json", "application/problem+json"},
            consumes = {"application/json"}
    )

    default ResponseEntity<ItemDetail> itemsIdPut(
            @Parameter(name = "id", description = "Item id", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
            @NotNull @Parameter(name = "If-Match", description = "ETag for optimistic locking, e.g. W/\"3\"", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "If-Match", required = true) String ifMatch,
            @Parameter(name = "UpdateItemRequest", description = "", required = true) @Valid @RequestBody UpdateItemRequest updateItemRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"code\" : \"ITM-001\", \"uomBase\" : \"pcs\", \"uoms\" : [ { \"uom\" : \"box\", \"coef\" : 10, \"notes\" : \"notes\" }, { \"uom\" : \"box\", \"coef\" : 10, \"notes\" : \"notes\" } ], \"name\" : \"name\", \"description\" : \"description\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"version\" : 3, \"categoryId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"status\" : \"Draft\", \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/problem+json"))) {
                    String exampleString = "Custom MIME type example not yet supported: application/problem+json";
                    ApiUtil.setExampleResponse(request, "application/problem+json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/problem+json"))) {
                    String exampleString = "Custom MIME type example not yet supported: application/problem+json";
                    ApiUtil.setExampleResponse(request, "application/problem+json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/problem+json"))) {
                    String exampleString = "Custom MIME type example not yet supported: application/problem+json";
                    ApiUtil.setExampleResponse(request, "application/problem+json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    public static final String PATH_ITEMS_POST = "/items";

    /**
     * POST /items : Create item
     *
     * @param createItemRequest (required)
     * @return Created (status code 201)
     * or Problem Details (RFC-7807) (status code 400)
     * or Problem Details (RFC-7807) (status code 409)
     */
    @Operation(
            operationId = "itemsPost",
            summary = "Create item",
            tags = {"Items"},
            responses = {
                    @ApiResponse(responseCode = "201", description = "Created", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = ItemDetail.class)),
                            @Content(mediaType = "application/problem+json", schema = @Schema(implementation = ItemDetail.class))
                    }),
                    @ApiResponse(responseCode = "400", description = "Problem Details (RFC-7807)", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetail.class)),
                            @Content(mediaType = "application/problem+json", schema = @Schema(implementation = ProblemDetail.class))
                    }),
                    @ApiResponse(responseCode = "409", description = "Problem Details (RFC-7807)", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetail.class)),
                            @Content(mediaType = "application/problem+json", schema = @Schema(implementation = ProblemDetail.class))
                    })
            },
            security = {
                    @SecurityRequirement(name = "bearerAuth")
            }
    )
    @RequestMapping(
            method = RequestMethod.POST,
            value = ItemsApi.PATH_ITEMS_POST,
            produces = {"application/json", "application/problem+json"},
            consumes = {"application/json"}
    )

    default ResponseEntity<ItemDetail> itemsPost(
            @Parameter(name = "CreateItemRequest", description = "", required = true) @Valid @RequestBody CreateItemRequest createItemRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"code\" : \"ITM-001\", \"uomBase\" : \"pcs\", \"uoms\" : [ { \"uom\" : \"box\", \"coef\" : 10, \"notes\" : \"notes\" }, { \"uom\" : \"box\", \"coef\" : 10, \"notes\" : \"notes\" } ], \"name\" : \"name\", \"description\" : \"description\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"version\" : 3, \"categoryId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"status\" : \"Draft\", \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/problem+json"))) {
                    String exampleString = "Custom MIME type example not yet supported: application/problem+json";
                    ApiUtil.setExampleResponse(request, "application/problem+json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/problem+json"))) {
                    String exampleString = "Custom MIME type example not yet supported: application/problem+json";
                    ApiUtil.setExampleResponse(request, "application/problem+json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
